검색기능 시
post를 검색
1. 태그로 검색 -> match로 tags를 검색 -> 공백기준으로 아예 일치하는것만 찾는듯?
2. 전문으로 검색 -> prefix로 title을 검색 -> 공백기준으로 앞글자부터 매칭되는걸 찾는듯?

태그구현중

1. 유저생성, 프로필 수정 시 엘라스틱에 반영 구현완
2. 업로드 시 타이틀에서 해시태그 부분만 찾아서 태그카운트, 태그와 전문으로 검색위해 엘라스틱에 등록 구현완

더 구현해야할것
3. 댓글과 업로드 타이틀 작성 시 @와 #입력 반응해서 실시간 검색되도록, 
완
4. 글에서 @#들은 <a>태그로 감싸서 리턴하게.
4구현 일부 완료, 해시태그 클릭 시 페이지구현 후 postFooter.tsx로 가서 마무리 하기
지금 해시태그 클릭시 url부분 구현부족 완료

5. 검색 페이지 만들어서 글에서 @, #앞에 붙은 글자들 클릭 시 프로필로 넘어가거나, 해시태그 검색탭으로 넘어가게 해야함
5 할차례, url로 온 string으로 해시태그 검색한 결과창 만들어야함.

23.10.11
완료, 근데 최근 게시물부터 보이게 하려고 createdAt필드를 tags DOC에 추가했고
hashtag.service 에서의 쿼리에서 sort를 썼는데 뭔가 이상하다.
제대로 못불러오는거같음.

titleInput에서 클릭 시 타이틀 수정하는것도 해야함. 완료,


6. 실시간 검색된 결과를 클릭 시 text수정해서 덮어씌우기 

하면 해시태그, 사람태그, 실시간 검색까지 완료인듯? 완료. 23.10.15


몽고랑 엘라스틱 동기화를 구현해놨는데, 정작 사용할일이 잘없다.
db낭비를 줄이기 위해 몽고랑 엘라스틱이랑 저장되는 내용이 다름

hashtag는 post관할,
지금 post랑 metadata랑 경계가 매우 모호하다.. 설게가 잘못된건 아닌거같은데
최초 요청을 metadata로 하는지 post로 하는지 app로 하는지 명확한 기준이 없어서
애매하다.


23.10.11
굉장히 오랜기간 이걸 진행중이다.
지금 느끼는점은, 루즈커플링의 장점은 잘 알겠는데,
내가 설계를 잘못한 탓인지, 너무 루즈하게 하려고 한 탓인지
뭐 하나 수정을하려면 굉장히 많이 찾아가면서 수정을 해야한다...
예를들어 post 한개를 띄우려고 하면, 좋아요 찾아가서 가져와야하고
metadata가서 사진 url 가져와야하고, title이랑 카운트 pgdb가서 가져와야하고
뭐 나름 장단점이 다 있겠는데, 지금 단점만 느끼고 있다.

다르게 생각해보면, 하나에 싹다 몰빵해서 db를 짜본적이 없어서 멀리멀리 분산해서
만드는것의 장점을 못느끼고 있는걸수도 있고..

어쨋든 초반에 생각을 더 해서 db설계를 했어야 했는데 대충 
이렇게하면 잘 굴러가겠지? 하면서 만든걸 후회중이다.

23.10.15
이제 댓글에서도 사람검색해서 태그할수 있게 검색창 띄우기 시작.
23.10.16
완료,
지금 버그가, 검색모달로 실시간검색한 걸 클릭 시 원본
글을 갈아끼우는데, 이게 useState를 사용하다보니까 갈아끼우면서 하는 업데이트가
뭔가 이상하다. 암만 시뮬레이션 돌려봐도 결과는 정확한데
자꾸 이상하게 텍스트가 업데이트됨. state가 이상하다고 밖에 생각안된다.
일단 버그를 인지만 하고 나중에 머리 비우고 구현을 싹다 다시 해봐야할듯.

23.10.17
검색창 구현 시작

해야할일
검색창에서 검색한거 클릭 시 창이동 구현 -완
결과 모두보기 버튼 만들어서 클릭 시 종합검색창으로 이동
종합검색창? 구현

라이브검색 결과 갯수 제한하기

이후 레디스 캐시서버 구현 시작
간단구상
포스트 하나 가져오려면, 여러 서버로 요청보내서 조립해서 클라이언트에 표시하는데,
조립된 결과를 캐시서버에 저장하면, 여러서버로 보내는 요청을 아낄 수 있지 않을까?
라는 생각임. 근데 캐시서버에 있는 결과가 old될 수 있음. 에 대한 방어도 필요

또 검색창에서 보여주는 postlist는 그냥 캐시서버에서 가져오는 포스트들.

23.10.21
모든검색창 탭 계속 구현중,
게시물탭은 완료, 유저탭에서 무한스크롤 구현해야함, 태그탭은 그 다음 구현.
그리고.. 검색 페이지들에서 검색바 클릭하면 실시간 검색해서 가져오는데,
뒤로가기로 실시간검색창 내렸다가 다시키면 또 검색한다.
검색바 껏다킬때 다시검색 안되게 수정하고싶다. -> 완료

무한스크롤(완), 태그탭은 아직안했음 -완료

10.23
검색탭에서 엔터누르면 모두검색 페이지로 넘어가게 만들고 -완
결과 모두 보기 까지 넣기 -완

더 구현해야할것 
게시물삭제, 댓글삭제, 대댓삭제, 게시물 수정(이건 빡셀듯, 글 수정은 쉬운데..
또 수정 탭 만드는것도..) 댓수정
뭐든 삭제 시에, postgres에 들어간거는 cascade삭제가 되는데 몽고에는 안됨
-> 카운터랑 삭제할것들 리스트 만들어서 카운터마다 일괄삭제시키기
(좀 이따가 삭제해도 되는게 있고 바로해야하는게 있고 를 구별해서 적용)

팔로우 관리, 팔로우창에서 사람검색, 좋아요 누른 게시물 모아보기
정도하면 거의 끝 아닌가?

다하고 나면 알림기능 구현, 레디스서버 구현

추가 - 버그있음, 랜딩코멘트에서 더 불러오기가 항상뜬다, 피드의 comment에서는 안뜬다.
그리고 로그아웃 구현까지

ㅋㅋㅋ진짜 프런트코드는 답도없다 ㅋㅋㅋㅋㅋㅋㅋㅋ 보기만해도 숨이 턱턱막힌다

10.24
삭제기능 구현중이다.
post comment cocomment가 casacde 등록돼있는데 이거 풀어야할듯?
뭐 하나가 없어지기라도하면 싹다 삭제작업 해야하는데
리소스 많이먹을거같다. cascade 안해도 될듯? 댓글 기록용으로도 필요할듯 하고,
만약 누가 태그해서 알림떴으면 게시글없어졌다고 알림을 없애는것도 힘들고.

그냥 삭제관리 객체 만들어서 관리시키게 해야할듯 cascade는 안하는게 맞는듯.
ㅋㅋㅋㅋ 근데 이렇게 하면 애초에 postgres쓴 이유가 cascade삭제 편리함 떄문인데...
허허

게시물삭제 중 post서버에서 할일은 끝,
유저에서 구현중

10.29

삭제기능 프런트 백 모두 구현완료, 댓글창 버그픽스까지 했음.
글, 댓글 수정은 나중에하자...
1. 좋아요 누른 게시물 모아보기를 만들어서 userinfomenu에 넣기,
2. 팔로우 관리 창 만들기
2-2. 팔로잉 팔로워 보는 모달에서 검색기능 추가

추후 캐시서버 알림서버

아 팔로워 팔로잉에서 username으로 검색하게 할 수가 없다.
팔로우 팔로잉 저장이 id로 저장되기 때문...
좀 복잡하긴 한데... username을 검색날리면 username으로 userId찾아서 어쩌구저쩌구
는 안됨. 안된다.

방법2 팔로우 팔로잉 doc에 username필드를 추가 -> username업데이트 시에는?

안된다. 그냥 안됨

10.30

팔로우한 사람 검색을 위해 몽고디비에 유저정보를 저장할거다.
기존에는 es에 검색을위한 유저정보를 수동을 넣었는데, 
먼저 구현해둔 monstache의 도움을 받을거라서, 
es에 넣는 작업을 몽고디비에 넣는작업으로 교체만 하면 된다.

그럼 이제 유저정보의 저장이 기괴한 구조로 된다..
일단 꼭 필요한 기능의 해결책이 이것뿐이라 (내생각에) 시작한다.

user.repo.ts에 몽고로 대체 가능한 메서드들이 있는데, 
몽고와 postgres 성능 테스트 해보면 좋을듯
조인해야하는 postgres가 느린건 당연할거같긴 하다.

-> 몽고가 빠르다.

monstache를 드디어 썼고, 제대로 동기화까지 된다. 신기하네...

11.08
프로젝트를 좀 쉬고 전공공부를 좀 복습했다.
그동안 생각한것들.
트랜잭션 처리를 붙이자. 고민 많이해서 필요하다고 판단되는 부분에 붙여보자.
너무많은 기능을 한꺼번에 구현해서 잠깐 전체흐름 보면서 리팩토링이 필요한거같다.
개판인, 아쉬운 부분이 보인다

11.12
ffl페이지에서 사람전체검색 구현완
매 요청마다 모든 사람 가져오는게 매우 비효율적이니까,
캐시객체 만들어서 관리하자 굳이 레디스까지는 필요없을듯

1. 위 기능 구현

2. ip체크 구현해서 하나의 기기에서만 사용하게 만들자.
이걸로 서버제어 로그아웃까지 만들수있을거같은데?

3. 리팩토링

2 -> 
1) 로그인 시 ip 업데이트
2) 인증 시(인증미들웨어) ip체크, 저장된 ip와 다르면 다른기기에서 로그인 돼 있다고 응답
ip업데이트는 로그인 시에만 하기, 인증때는 체크만. 
JWT는 이미 발급된 토큰을 만료시키지 못함, 세션으로 갈아타는 이유.
근데? ip체크만을 도입하면 로그아웃 구현할 수 있겠는데?
뭐 복잡하게 리프레시토큰 레디스에 넣고 어쩌구

그냥 레디스에 ip만을 저장하면 되는거 아닌가
로그아웃 시키는건 doc삭제시키면 되고
인증 미들웨어에서 현재ip 레디스저장된 ip 비교하면 기기바꼈는지 감지가능하고.

이게 간단하게 구현할수있는거같은데 굳이 어떤점때문에 힘들게 구현하는지는,
다른사람들 글좀 더 읽어봐야할듯
어렵게 하는 이유가 분명 있을거아니야
내가 구현할 방법에 문제점도 있을거고.

프로젝트를 하면 할수록 jwt를 왜 써야하는지 의문이다.
뭔가 jwt가 새로 나온거고 트렌디 하게 느껴져서 사람들이 많이쓰고 문서도 많은거 같은데,
잘 모르겠다. 어쨌든 내가 생각한대로 구현해보면 한 기기에서만 로그인을 만들 수 있겠는데,
만약 로그인, 인증부분에서 좀 뜯어고치고 싶은부분이 더 생긴다면 미루지말고 그냥 세션으로 싹다바꿔버리자.

뭐 돌아다니는 많은 글에서 각자의 장점을 나열하고있는데, 내가직접 그런상황에서 구현을 안해봐서
아 ~그냥 이게 장점이구나~ 하고만 넘기고 뭔느낌인지 잘 모르겠단말이지
또 리프레시토큰이란 것이 와닿지가 않는다. 암만 읽어봐도 잘 모르겠다 헛짓같고

ffl에서 간단하게 인메모리 캐시로 ffl 유저검색 구현완료
db에서 가져오는 사이에 또 동일한 타겟에 대한 요청이 온다면... 에 대한 방어가
필요할거같은데, 딱히 문제는 안될듯 동일한 타겟을 두번 가져오는것 일 뿐임 (아마도)
가져왔으면 붙여넣기 하는게 전부니까.

작업이 조금이라도 밀리면 뭔가 문제가 생길거같다 
어느 서버라도 당연히 그러겠지만;

11.13
지금 auth를 할 때마다 무조건 user정보를 디비에서 가져오는데,
유저정보가 필요할때만 가져오게 하고싶다.
info필요한 api로 axios요청 시 헤더값에 뭐 needUserInfo: true 같이 넣어주면
미들웨어에서 헤더추출해서 authNeedUserInfo에 요청을 날리고,
필요없으면 그냥 인증만 하는 메서드에 날리면 될거같다.
지금까지 만든 api 전체를 싹다 하나씩 살펴보면서, 컨트롤러에서 서비스로 넘길 때
req를 넘기는 api들만을 그렇게 적용시키면 됨.
싹다 봐야하기 때문에 이거하면서 리팩토링하고 전체적으로 점검하면 좋을듯?

일단 ip체크를 만들어 볼까
그냥 {email: '128.1.1.1'} 과 같은 형태로만 저장할거라서 굳이 레디스가 필요할까.

근데, 지금당장 필요한게 아니란말이지

metadata + postfooter레디스 캐시서버부터 만들자.
검색페이지에서 캐시에 있는거 가져와서 보여주게.
인스타 검색창 처럼 만들기위해.

11.20

cs를 점검했다. 다시 구현 ㄱㄱ
캐시서버를 만들려고 생각했지만, 아직 구상이 잘 안된다.
알림 기능 부터 만들어보자.

알람 인터페이스 대충 만들어놨고,
이제 알림 필요한 메서드에 알림서버로 메세지보내기 구현시작

11.29
알람기능을 빡세게 구현중이다.
알람종류와 상황이 다양해서 타입선정에 머리가 아프다.
그래도 거의다왔다. 태그알람 저장과 같은유형 알람 합치기 하면 백 구현은 거의 끝,
이후는 내 모든알람 가져오기, overDate된 알람 삭제, 알람 지정해서 삭제, 내알람 모두삭제,
등등 구현 후 프런트에 옮기기

12.01
알람 합치기를 어떤식으로 구현할지 생각하기에 너무 이르다.
그냥 지금은 싹다저장시키고 싹다 알림보내자
머리속에 떠오르는 방법들이 몇개 있는데 애매하다.

12.05
별짓을 다해봐도 알람창에서 게시물 사진 띄우기가 안된다.
돌아버리겠네
끔찍한 문제많은 코드로 구현성공

무한스크롤 적용하는중인데 스크롤이 안된다. 스크롤 자체가 안생긴다.
overflow 스타일 넣어도 안된다.
모달이 아니라 아예 페이지로 빼보자.
/alert/암호화 userId 로 접근하고, auth부터해서 해당유저 아니면 팅기게. 근데 피곤, 내일하자

24.2.1
alrt를 페이지로 빼고 나니까 무한스크롤 제대로 작동.
두달 프로젝트를 안해서 일단 전체 기능테스트 부터 한번 해보고 시작

일단 보면, 
1. 알람 클릭 시 페이지 이동 전에 알람 읽음처리 요청 날리기- 완
2. 모든알림 api만들어서 프런트에도 채워넣기- 완
3. 알림 삭제버튼 넣고 기능구현 <---는 근데 인스타에도 없는데? 그냥 서버에서
 overdate된 것들은 알아서 삭제하게 하는게 나을듯
4. landing에서 새로운 알림 있으면 alert아이콘 반짝이게 가능? 아니면 숫자 표시나.. 완

정도 하면 알림은 얼추 끝인듯?

이후 검색탭에 디폴트 게시물 띄우기, DM구현시작


02.05 
알림 클릭해서 들어간곳이 삭제된 것이라면? 을 만들자

02.07
댓 덧 postpage, commentpage 에서 missing 났을 때 없는거라고 표시 완료

앵간한건 진짜 다만들었다 

남은건 DM, 검색탭 게시물 띄우기, 실시간알림, 한번에 하나의 기기 로그인,
글 댓글 수정, 이고
이중 제일큰건 DM.
DM부터 만들자.

24.03.24
슬슬 모든 기능이 마무리가 돼 간다.
생각만 해도 머리아픈 배포할 생각을 미루고있었는데 지금에야 좀
심각하게 고민해봤다.
ec2로 비싼거 끊어서 도커컴포즈 쌩으로 돌려볼까 했지만
로컬에서 서비스 싹다 on 할때 6코어가 싹다 풀로 돌아가는것과
메모리가 상시5기가를 처먹는걸 고려했을때, 이 생각은 포기.

그렇다고 배포를 포기? .. 진지하게 고민했지만 이건 아님.

그래서 하나의 nestjs 서버로 통합하기로 결정.
애초에 메서드 호출하는 형식으로 통신이니까 복붙하면 뚝딱 하나로 합칠 수 있을듯?
그렇게해서 배포하기로 결정했다.

메세지 부분 빨리 마무리 후 진짜 필요한 기능만 추가하고 마무리하자

dm 파트 더 할것
landing에서 newMessage체크해서 반짝이게, 완
readMessage메서드에 chatRoom newCount = 0 설정 추가, 완
dmchatroom.tsx에서 실시간 메세지 받기, 보내기 로직 구현 완
(내가 보낸 메세지는 tmpId를 가지고있고 메세지 옆에 pending 돌리다가,
 성공 signal 오면 pending 멈추기 + 실시간 읽음 반영 + 상대가 메세지 보냈으면 snack띄워서 
 맨아래로 스크롤 가능하게) 완

03.25
dm 완전히 완료했고, 컬렉션 페이지, 검색탭에 최근 올리온것들 띄우기 남았는데
우선 흩어진 서버들 싹다 nestjs로 합치는것 부터 시작.
여기까지 진행한것들 그대로 냅두고 새로운 깃 repo만들어서 시작하자

03.27 
통합하기 쭉쭉하는도중 추가해야할것들 발견
1. client에서 대댓에 좋아요 버튼 달기, 내 댓글이면 좋아요 표시가 안보임 -완
2. 댓, 대댓에 좋아요 달면 알림 저장하기 -> 이거는 밑에 param문제 해결하고 나서 해야될듯
이후 live-search 웹소켓이랑 dm웹소켓 까지 통합하면 됨.

근데 지금 alertcontroller에서 @Body나 Req같은 param을 아예 캐치 못한다. 뭐지??

통합하면서 느끼는건데 메세지 pub/sub방식이 진짜 편리하다
메세지 뿌리는 애는 그냥 신경안쓰고 뿌려버리면 되고, 데이터 필요한 애는
데이터 출처의 큐에서 가져오면 되고.
pub/sub을 일일이 다시 서비스에다가 가져와서 타 서비스 메서드 콜하려니까 
답답해 죽겠고 눈아프다..

03.28
?? 종속성 고치고 나니 alert 컨트롤러가 제대로 일한다.

27일의 2번은 웹소켓 다 통합하고 만들자. 프런트 고치기 귀찮다.

msa 싹다 버리고 통합 성공, 아직 실시간 검색 소켓 연결은 못했음.

앞으로 할것은, 

검색페이지 게시물 display -> front 완
컬렉션페이지 내가 좋아요한 게시물 display -> front 완
댓 대댓 좋아요 알림 만들기(대댓까지는 하지말까 알림 너무많을듯) -> front back 둘다 -> 폐기.
로그아웃 쿠키삭제 만들기 -> 예전에 쿠키 접근이 안되서 계속 미루다가 지금까지 안했음
dm나가기, 둘다 나가면 메세지 삭제 -> 이거까지 해야할까 싶긴한데... -> 나중에 여유 된다면.

dm 나가기 구상한것,
inbox에서 삭제 시 몽고 chatroom삭제, pgdb chatroom refCount -= 1 하고,
pgdb 트리거 등록해서 chatroom refCount -> 0 되면 chatroom삭제, 메세지는 cascade걸어놔서 자동 삭제.
한명만 나간경우, 안나간 한명이 또 메세지 보내면 나간 친구 chatroom 새로 생성 로직 추가

까지 하고 배포시작

03.29
추가할것
1. 랜딩에서 hasMore false 되면 3일간 올라온거 끝임 표시 나타나게, 완
2. upload에서 업로드 버튼 클릭 시 processing... 모달 띄우기 완
3. 로그아웃 쿠키삭제 만들기 완
4. search socket 프런트에서 연결하기 완

서치소켓 있는곳

comment.tsx
landingcomment.tsx
commentpage.tsx
searchbar.tsx
upload.tsx

03.30
배포를 목전에 두고있다.
aws로 postgres, elastic 인스턴스 만들어서 테스트 연결 해봤다.
atlas 몽고는 이전에 해봤어서 테스트는 패스.

배포/개발 환경변수 작업도 했다.

까먹으면 안될것들 리드미 좀 적고, 어떤순서로 배포해야하는지
예전에 플리 띄웠던거 생각하면서 정리 후 바로 시작.

간단하게 생각좀 해보면,
front는 react build해서 nginx로 80포트 index.html 연결해서 서빙,

back은 도커컴포즈로 gateway, upload 동시에 띄우고
docker-compose.yml가서 클라우드 저장소 환경변수 세팅.

https 인증서 봇까지 돌리면 완성.

예상되는 오류는 front에서 cors문제.

까지 작업 한 후, gateway에서 유저 ip 제대로 가져와지면
useragent, ip 등등 싹다 활용해서 하나의 기기에서만 로그인 가능하게.
까지 하면,

만족할만한 sns프로젝트 완성.


03.31
db 쓰면서 느낀점 적었었는데 여기로 옮겨놨음

postgres와의 연결이 개발 초기에는 typeorm으로 했지만, 하면 할수록 답답해서 sql이 주를 이룸.

mongodb와 elastic을 연동해주는 monstache를 사용해 봤지만,
mongodb doc의 원본 그대로 elastic에서 필요한 경우가 적었음.

결국 직접 파싱해서 넣기도 했음.

04.08
전공책 다시보는 중.
리팩토링도 약간씩 하고있다.
1. 트랜잭션 추가 고민
2. mock데이터 대량 삽입
3. 2 이후 복잡쿼리 성능체크
4. 테스트 추가해서 안정화 이후 docker-compose를 ecs로 빼내기

아니면 우선 4번부터 하고 나서 나머지 하는게 나을수도?

정도를 고민중임.

04.11
지금 몽고 재정비 중이다. 지금보니 개판인 부분이 꽤많다.

모놀리틱으로 전환후,
몽고디비에 userinfo가 있을 필요가 없어보임. 없애버리면
monstache로 없어져야해서 더 lite해질 수 있기도 한데.
이전에는 서비스간 왔다갔다가 힘들어서 그랬는데, 지금은 감당가능함.
물론 population을 없애고 postgres한테 요청하는거라
DB request를 한번 더 해야하긴함. -> 좀더 고민해보니 이거 그냥 문장으로 아무생각없이 보면
별거아닌거 같은데 ㅋㅋㅋㅋㅋㅋ

alert같은 경우 content내부에 userinfo 긁어오기 위한 userId가 위치함.
그래서 postgres에 재귀적 요청을 하는게 편함.(사람이 코드짜기가.)
그게 싫으면 alert싹 돌면서 id만 추출해서 리스트로 postgres에 넘겨야함.
-> 이건 schema 다시짜는게 나은듯. 지금 문제점도, alert이 누구 owner인지,
누가 alert을 발생시켰는지 구분없이 그냥 userId로 적어놨고, content안에 있으면
알림 발생시킨 사람, content밖에 있으면 주인Id로 구분하는데, 모호하긴함.

근데 이렇게 content밖으로 빼낸다 해도? 그냥 alert싹돌면서 id 추출해야하는건 변함없음.
그냥 deps가 한개 줄어들뿐(alert.content.userId) -> (alerts.whoSendId)
또 추후 추가할 사람이 보낸 알림이 아니라면????? postgres로 infoList.length와 
alerts.length가 달라진다면 또 불편한 코드가 된다. pop의 경우? 없으면 Doc | undefined이 되서
타입체크로 쉽게 되는데..

편리한 population, 쉬운 직관적인 코드 vs 데이터 일관성, 중복데이터 저장
좌측 -> 알림을 볼 때 마다 일어남, 요구사항 변경가능성 다분함.
우측 -> 유저정보가 바뀔때 마다 일어남, 요구사항 왠만해선 안변함.

을 생각했을때 아직은 population을 위해 몽고에 유저정보 위치하는게 맞다.


04.16
데이터 삽입하면서 버그 체크중.
이제는 db쿼리가 변할일은 거의 없는듯.
데이터 많이 채워넣은 이후에는 인덱스 고민해서 추가 삭제 시작.

